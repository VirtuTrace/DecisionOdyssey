@using Client.Components
@using Client.Singletons

@inherits LayoutComponentBase

@inject ApplicationState ApplicationState

<MudThemeProvider @bind-IsDarkMode="@ApplicationState.DarkMode" Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Decision Odyssey</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <ErrorBoundary>
            <ChildContent>
                <MudPaper Elevation="0" Class="ma-4">
                    @Body
                </MudPaper>
            </ChildContent>
            <ErrorContent Context="ex">
                @{ OnError(ex); } @*calls custom handler*@
                @* <p>@ex.Message</p> $1$prints exeption on page#1# *@
            </ErrorContent>
        </ErrorBoundary>
    </MudMainContent>
</MudLayout>

@code {
    private readonly MudTheme _theme = new();

    private bool _drawerOpen = true;
    
    protected override void OnInitialized()
    {
        ApplicationState.OnDarkModeChanged += StateHasChanged;
    }
    
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    private static void OnError(Exception ex)
    {
        Console.WriteLine(ex.Message);
    }
}