@using Client.JSWrappers
@using Client.Models.DecisionElements
@using Client.Models.DecisionElements.DecisionMatrix

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject BlobCreator BlobCreator

<MudDialog>
    <DialogContent>
        <MudPaper Class="d-flex flex-column pa-4" Elevation="0">
            <MudPaper Class="d-flex pa-4" Elevation="0">
                <MudCheckBox Label="Image:" LabelPosition="LabelPosition.Start" Value="@ImagePresent" Disabled="@VideoPresent" Color="Color.Primary"/>
                @if (ImagePresent)
                {
                    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .webp" FilesChanged="UploadImage">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="MatrixCell.Contains(MatrixDataType.Image) ? Color.Tertiary : Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context">
                                Upload File
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                }
            </MudPaper>

            <MudPaper Class="d-flex pa-4" Elevation="0">
                <MudCheckBox Label="Audio:" LabelPosition="LabelPosition.Start" Value="@AudioPresent" 
                             Disabled="@VideoPresent" Color="Color.Primary"/>
                @if (AudioPresent)
                {
                    <MudFileUpload T="IBrowserFile" Accept=".wav, .mp3, .ogg" FilesChanged="UploadAudio">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="MatrixCell.Contains(MatrixDataType.Audio) ? Color.Tertiary : Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context">
                                Upload File
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                }
            </MudPaper>
            <MudPaper Class="d-flex pa-4" Elevation="0">
                <MudCheckBox Label="Video:" LabelPosition="LabelPosition.Start" Value="@VideoPresent" Disabled="@(AudioPresent || ImagePresent)" Color="Color.Primary"/>
                @if (VideoPresent)
                {
                    <MudFileUpload T="IBrowserFile" Accept=".mp4, .webm, .mov" FilesChanged="UploadVideo">
                        <ButtonTemplate>
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="MatrixCell.Contains(MatrixDataType.Video) ? Color.Tertiary : Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context">
                                Upload File
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                }
            </MudPaper>
            <MudPaper Class="d-flex pa-4" Elevation="0">
                <MudCheckBox Label="Text:" LabelPosition="LabelPosition.Start" Value="TextPresent" Color="Color.Primary"/>
                @if (TextPresent)
                {
                    <MudTextField T="string" @bind-Value="MatrixCell.Text" Label="Multiline" Variant="Variant.Text"
                                  AutoGrow MaxLines="5"/>
                }
            </MudPaper>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Cancel</MudButton>
        <MudButton Color="Color.Tertiary" OnClick="@Preview" Disabled="@MatrixCell.IsEmpty()">Preview</MudButton>
        <MudButton Color="Color.Primary" OnClick="@Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter] public MatrixCell MatrixCell { get; set; } = null!;
    [Parameter] public MatrixCellBlobCache Cache { get; set; } = null!;
    
    public bool ImagePresent { get; set; }
    public bool AudioPresent { get; set; }
    public bool VideoPresent { get; set; }
    public bool TextPresent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ImagePresent = MatrixCell.Image.Present();
        AudioPresent = MatrixCell.Audio.Present();
        VideoPresent = MatrixCell.Video.Present();
        TextPresent = MatrixCell.Text != string.Empty;
    }
    
    private Task UploadImage(IBrowserFile? file)
    {
        return UploadMedia(file, MatrixCell.Image, MatrixDataType.Image);
    }
    
    private Task UploadAudio(IBrowserFile? file)
    {
        return UploadMedia(file, MatrixCell.Audio, MatrixDataType.Audio);
    }
    
    private Task UploadVideo(IBrowserFile? file)
    {
        return UploadMedia(file, MatrixCell.Video, MatrixDataType.Video);
    }
    
    private async Task UploadMedia(IBrowserFile? file, MediaData media, MatrixDataType type)
    {
        if (file is null)
        {
            return;
        }
        
        media.Data = await ReadFileBinary(file);
        media.Extension = Path.GetExtension(file.Name);
        await Cache.RevokeUrl(BlobCreator, type);
        StateHasChanged();
    }
    
    private static async Task<byte[]> ReadFileBinary(IBrowserFile file)
    {
        var stream = file.OpenReadStream(file.Size + 1);
        var bytes = new byte[stream.Length];
        await stream.ReadExactlyAsync(bytes);
        return bytes;
    }

    private void Submit()
    {
        Snackbar.Add("Cell Updated", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async void Preview()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            CloseOnEscapeKey = true,
            ClassBackground = "blur-background"
        };
        var parameters = new DialogParameters
        {
            ["MatrixCell"] = MatrixCell,
            ["Cache"] = Cache
        };
        var dialog = await DialogService.ShowAsync<ViewerMatrixDialog>("Preview", parameters: parameters, options: options);
        await dialog.Result;
    }
    
    private void Cancel()
    {
        Snackbar.Add("Changes Discarded", Severity.Error);
        MudDialog.Cancel();
    }
}