@page "/viewer/matrix/select"

@using Client.Singletons
@using Common.DataStructures.Dtos.DecisionElements

@inherits Client.Pages.Base.AuthenticatedPage

@inject HttpClient Http
@inject ApplicationState ApplicationState
@inject NavigationManager NavigationManager
@inject HttpUtility HttpUtility

<h3>Select Matrix</h3>
<MudSelect T="DecisionMatrixDto" @bind-Value="SelectedMatrix" ToStringFunc="_converter" Label="Matrices" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
    @foreach (var matrix in Matrices)
    {
        <MudSelectItem Value="@matrix" />
    }
</MudSelect>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SelectMatrix">Select</MudButton>

@code {
    private const string SelectMatrixName = "Select Matrix";
    
    private List<DecisionMatrixDto> Matrices { get; } = [];
    private DecisionMatrixDto? SelectedMatrix { get; set; }
    private readonly Func<DecisionMatrixDto, string> _converter = dm => dm.Name;

    protected override async Task<bool> OnInitializedAsync()
    {
        var valid = await base.OnInitializedAsync();
        if (!valid)
        {
            return false;
        }
        
        var placeholderMatrix = new DecisionMatrixDto
        {
            Name = SelectMatrixName,
            UserEmail = ""
        };
        Matrices.Add(placeholderMatrix);
        var matrices = await HttpUtility.GetMatrices(Http);
        Matrices.AddRange(matrices);

        SelectedMatrix = placeholderMatrix;
        StateHasChanged();
        return true;
    }

    private async void SelectMatrix()
    {
        if (SelectedMatrix is null || SelectedMatrix.Name == SelectMatrixName)
        {
            return;
        }

        ApplicationState.SelectedMatrix = await HttpUtility.GetMatrix(Http, SelectedMatrix.Guid);
        SelectedMatrix = null;
        var matrix = ApplicationState.SelectedMatrix;
        NavigationManager.NavigateTo($"viewer/matrix/prompt/{matrix.Guid}");
    }
}