@page "/editor/matrix"

@using System.Net.Http.Headers
@using Client.Components.Dialogs
@using Client.JSWrappers
@using Client.Models.DecisionElements.DecisionMatrix
@using Client.Singletons
@using Client.Utility
@using Common.DataStructures.Dtos.DecisionElements
@using Common.Enums
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Spreadsheet
@using Color = MudBlazor.Color
@using Row = DocumentFormat.OpenXml.Spreadsheet.Row
@using Common.DataStructures.Http.Responses
@using Client.Excel
@using Client.Components

@inherits Client.Pages.Base.AuthenticatedPage

@inject IDialogService DialogService
@inject HttpClient Http
@inject ApplicationState ApplicationState
@inject ISnackbar Snackbar
@inject HttpUtility HttpUtility
@inject BlobCreator BlobCreator
@inject NavigationManager NavigationManager

<PageTitle>Editor</PageTitle>

<h1>Editor</h1>

@if (Matrix is null)
{
    <h3>Select Matrix to Edit</h3>
    <MudSelect T="DecisionMatrixDto" @bind-Value="@SelectedMatrix" ToStringFunc="@_converter" Label="Matrices" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
        @foreach (var matrix in Matrices)
        {
            <MudSelectItem Value="@matrix" />
        }
    </MudSelect>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SelectMatrix">Select</MudButton>
}
else
{
    <MudSimpleTable Breakpoint="Breakpoint.Sm">
        <thead>
        <tr>
            <th style="border-right: 1px solid #cdd0d4;">
                <MudTextField @bind-Value="Matrix.Name" Label="Title" Variant="Variant.Text"/>
            </th>
            @for (var col = 0; col < Matrix.ColumnNames.Count; col++)
            {
            var localCol = col;
            <th>
                <MudTextField @bind-Value="Matrix.ColumnNames[localCol]" Label="Alternative" Variant="@Variant.Text"/>
            </th>
            }
            <th style="border-left: 1px solid #cdd0d4;"></th>
        </tr>
        </thead>
        <tbody>
        @for (var row = 0; row < Matrix.RowCount; row++)
        {
        var localRow = row;
        <tr>
            <th style="border-right: 1px solid #cdd0d4;">
                <MudTextField @bind-Value="Matrix.RowNames[localRow]" Label="Decision Factor" Variant="Variant.Text"/>
            </th>
            @for (var col = 0; col < Matrix.ColumnCount; col++)
            {
            var localCol = col;
            <td style="text-align: center; vertical-align: middle;">
                @if (Matrix[localRow, localCol].IsEmpty())
                {
                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@(() => OpenCellEditDialog(localRow, localCol))">Add</MudButton>
                }
                else
                {
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => OpenCellEditDialog(localRow, localCol))">Edit</MudButton>
                }
            </td>
            }
            @if (localRow == 0)
            {
            <td rowspan="@(Matrix.RowCount)" style="border-left: 1px solid #cdd0d4; text-align: center; vertical-align: middle;">
                <MudGrid Spacing="2" Justify="Justify.Center">
                    <MudItem xs="12">
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Add"
                                   Color="Color.Primary" OnClick="@AddColumn">Add Alternative</MudButton>
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Remove"
                                   Color="Color.Secondary" OnClick="@RemoveColumn">Remove Alternative</MudButton>
                    </MudItem>
                </MudGrid>
            </td>
            }
        </tr>
        }
        <tr>
            <td style="border-right: 1px solid #cdd0d4;"></td>
            <td colspan="@(Matrix.ColumnCount)" style="text-align: center; vertical-align: middle;">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Add" Color="Color.Primary"
                           OnClick="@AddRow">Add Decision Factor</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Remove" Color="Color.Secondary"
                           OnClick="@RemoveRow">Remove Decision Factor</MudButton>
            </td>
            <td style="border-left: 1px solid #cdd0d4;"></td>
        </tr>
        </tbody>
    </MudSimpleTable>
    <div class="pa-7"></div>
    <MudSimpleTable Elevation="0">
        <thead>
        <tr>
            <th style="text-align: center;">Matrix Features</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td style="text-align: start;">
                <MudGrid Justify="Justify.FlexStart">
                    <MudItem xs="6">
                        @* <FlagCheckbox Flag="Matrix.Features" Color="Color.Primary" FlagValue="MatrixFeatures.Prompt" *@
                        @*               FlagChanged="UpdatePromptExistence" Label="Enable Decision Scenario"/> *@
                    </MudItem>
                    <MudItem xs="6">
                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary"
                                   OnClick="OpenPromptEditDialogue">Edit Decision Scenario</MudButton>
                    </MudItem>
                    <MudItem xs="6">
                        <FlagCheckbox @bind-Flag="Matrix.Features" Color="Color.Primary" FlagValue="MatrixFeatures.Timer"
                                      Label="Enable Time Limit"/>
                    </MudItem>
                    <MudItem xs="6">
                        @if (Matrix.Features.HasFlag(MatrixFeatures.Timer))
                        {
                            <TimePicker Label="Allotted Time (h:m:s)" @bind-Time="_time"/>
                        }
                        else
                        {
                            <MudSpacer />
                        }
                    </MudItem>
                    <MudItem xs="6">
                        <FlagCheckbox @bind-Flag="Matrix.Features" Color="@Color.Primary"
                                      FlagValue="MatrixFeatures.RowRating" Label="Enable Decision Factor Rating"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSpacer />
                    </MudItem>
                    <MudItem xs="6">
                        <FlagCheckbox @bind-Flag="Matrix.Features" Color="@Color.Primary"
                                      FlagValue="MatrixFeatures.ColumnRating" Label="Enable Bin Rating"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSpacer />
                    </MudItem>
                    <MudItem xs="6">
                        <FlagCheckbox @bind-Flag="Matrix.Features" Color="@Color.Primary"
                                      FlagValue="MatrixFeatures.RowRandomization" Label="Enable Decision Factor Randomization"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSpacer />
                    </MudItem>
                    <MudItem xs="6">
                        <FlagCheckbox @bind-Flag="Matrix.Features" Color="@Color.Primary"
                                      FlagValue="MatrixFeatures.ColumnRandomization" Label="Enable Alternative Randomization"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSpacer />
                    </MudItem>
                </MudGrid>
            </td>
        </tr>
        </tbody>
    </MudSimpleTable>
    <MudFileUpload T="IBrowserFile" FilesChanged="CreateMatrixFromTemplate">
        <ButtonTemplate>
            <MudButton HtmlTag="label"
                       Variant="Variant.Outlined"
                       Color="Color.Primary"
                       for="@context.Id">
                Create From Template
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveMatrix">Save</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ResetMatrix">Reset</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="ShareMatrix" Disabled="@(!EditingExistingMatrix)">Share</MudButton>
}

@code {
    private const string CreateMatrix = "Create new matrix";
    private const int MetadataRows = 7;
    
    private static readonly HashSet<string> TrueStringValues = new(StringComparer.OrdinalIgnoreCase)
    {
        "true", "yes", "on", "enabled", "1", "active", "t", "y", "enable"
    };
    
    private List<DecisionMatrixDto> Matrices { get; } = [];
    private List<List<MatrixCellBlobCache>> CellCache { get; } = []; 
    private DecisionMatrixDto? SelectedMatrix { get; set; }
    private DecisionMatrix? Matrix { get; set; }
    private TimeSpan? _time = new TimeSpan(01, 00, 00);
    private bool EditingExistingMatrix { get; set; }
    private Guid MatrixGuid { get; set; }
    
    private SharedStringTable? SharedStringTable { get; set; }
    
    private readonly Func<DecisionMatrixDto, string> _converter = dm => dm.Name;
    
    protected override async Task<bool> OnInitializedAsync()
    {
        var loggedIn = await base.OnInitializedAsync();
        if (!loggedIn)
        {
            return false;
        }
        
        var matrices = await HttpUtility.GetMatrices(Http);
        Matrices.Clear();
        var placeholder = new DecisionMatrixDto { Name = CreateMatrix, UserEmail = "" };
        Matrices.Add(placeholder);
        Matrices.AddRange(matrices);
        SelectedMatrix = placeholder;
        StateHasChanged();
        return true;
    }

    private async Task SelectMatrix()
    {
        if (SelectedMatrix is null)
        {
            return;
        }

        if (SelectedMatrix.Name == CreateMatrix)
        {
            Matrix = new DecisionMatrix();
            Matrix.AddColumn();
            Matrix.AddRow();
            CellCache.Add([new MatrixCellBlobCache()]);
            EditingExistingMatrix = false;
            MatrixGuid = Guid.NewGuid();
        }
        else
        {
            var matrix = await HttpUtility.GetMatrix(Http, SelectedMatrix.Guid);
            Matrix = matrix;
            CellCache.Initialize(Matrix.RowCount, Matrix.ColumnCount);
            _time = TimeSpan.FromSeconds(Matrix.AllottedTime);
            EditingExistingMatrix = true;
            MatrixGuid = SelectedMatrix.Guid;
        }
    }

    private async Task OpenCellEditDialog(int row, int col)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            ["MatrixCell"] = Matrix![row, col],
            ["Cache"] = CellCache[row][col]
        };
        var dialog = await DialogService.ShowAsync<EditorMatrixDialog>("Edit Matrix Cell", parameters: parameters, options: options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }

    private async Task OpenPromptEditDialogue()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["MatrixCell"] = Matrix!.Prompt };
        var dialog = await DialogService.ShowAsync<EditorMatrixDialog>("Edit Decision Scenario", parameters: parameters, options: options);
        await dialog.Result;
    }
    
    private void AddRow()
    {
        Matrix!.AddRow();
        List<MatrixCellBlobCache> cacheRow = [];
        for(var col = 0; col < Matrix.ColumnCount; col++)
        {
            cacheRow.Add(new MatrixCellBlobCache());
        }
        CellCache.Add(cacheRow);
        StateHasChanged();
    }

    private void AddColumn()
    {
        Matrix!.AddColumn();
        for(var row = 0; row < Matrix.RowCount; row++)
        {
            CellCache[row].Add(new MatrixCellBlobCache());
        }
        StateHasChanged();
    }

    private async void RemoveRow()
    {
        if (Matrix!.RowCount == 1)
        {
            return;
        }

        for (var col = 0; col < Matrix.ColumnCount; col++)
        {
            await CellCache[Matrix.RowCount - 1][col].RevokeUrls(BlobCreator);
        }
        CellCache.RemoveAt(Matrix.RowCount - 1);
        Matrix.RemoveRow();
        StateHasChanged();
    }

    private async void RemoveColumn()
    {
        if (Matrix!.ColumnCount == 1)
        {
            return;
        }
        
        for(var row = 0; row < Matrix.RowCount; row++)
        {
            var cacheRow = CellCache[row];
            var cacheCell = cacheRow[Matrix.ColumnCount - 1];
            await cacheCell.RevokeUrls(BlobCreator);
            cacheRow.RemoveAt(Matrix.ColumnCount - 1);
        }
        Matrix.RemoveColumn();
        StateHasChanged();
    }

    private async void ShareMatrix()
    {
        var matrixUrl = NavigationManager.BaseUri + "viewer/prompt/" + Matrix!.Guid;
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["UrlToCopy"] = matrixUrl };
        var dialog = await DialogService.ShowAsync<CopyUrlDialog>("Share Matrix", parameters: parameters, options: options);
        await dialog.Result;
    }
    
    
    private async Task ResetMatrix()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true
        };
        const string text = "Are you sure you you want to clear the current matrix?";
        var parameters = new DialogParameters { ["DialogText"] = text };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Selection", parameters: parameters, options: options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Matrix!.Reset();
            foreach (var row in CellCache)
            {
                foreach (var col in row)
                {
                    await col.RevokeUrls(BlobCreator);
                }
            }
        }
    }

    private async void SaveMatrix()
    {
        if (!IsMatrixValid())
        {
            return;
        }

        if (Matrix!.Features.HasFlag(MatrixFeatures.Timer))
        {
            Matrix.AllottedTime = _time!.Value.ToSeconds();
        }

        var (jsonContent, archive) = Matrix.Archive();
        var (fc, ms) = HttpUtility.CreateMultiPartContent(archive, jsonContent, Matrix.Name);
        using var formContent = fc;
        using var memoryStream = ms;

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", ApplicationState.AccessToken);

        HttpResponseMessage response;
        if (EditingExistingMatrix)
        {
            response = await Http.PutAsync($"api/DecisionMatrix/{MatrixGuid}", formContent);
        }
        else
        {
            response = await Http.PostAsync("api/DecisionMatrix", formContent);
        }

        if (response.IsSuccessStatusCode)
        {
            var statusMessage = await response.Content.ReadFromJsonAsync<StatusMessage>();
            var message = statusMessage is null ? "Matrix saved successfully" : statusMessage.Message;
            Snackbar.Add(message, Severity.Success);
            EditingExistingMatrix = true;
        }
        else
        {
            var message = response.ReasonPhrase ?? $"Error: {response.StatusCode}";
            Snackbar.Add(message, Severity.Error);
        }
        
        StateHasChanged();
    }

    private bool IsMatrixValid()
    {
        if (Matrix is null)
        {
            return false;
        }
        
        if (Matrix.Name == "")
        {
            Snackbar.Add("Matrix must have a title", Severity.Error);
            return false;
        }

        if (Matrix.ColumnNames.Any(col => col == ""))
        {
            Snackbar.Add("Columns must have a column name", Severity.Error);
            return false;
        }

        if (Matrix.RowNames.Any(row => row == ""))
        {
            Snackbar.Add("Rows must have a row name", Severity.Error);
            return false;
        }

        if (Matrix.Data.Any(row => row.Any(cell => cell.IsEmpty())))
        {
            Snackbar.Add("Cells cannot be empty", Severity.Error);
            return false;
        }

        if (Matrix.Prompt.IsEmpty())
        {
            Snackbar.Add("Decision Scenario cannot be empty", Severity.Error);
            return false;
        }

        return true;
    }

    private async void CreateMatrixFromTemplate(IBrowserFile? file)
    {
        if (file is null)
        {
            return;
        }

        if(file.ContentType != "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        {
            Snackbar.Add("Invalid file type. Must be an Excel file", Severity.Error);
            return;
        }
        
        var stream = file.OpenReadStream();
        var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        var spreadsheet = SpreadsheetDocument.Open(memoryStream, false);
        var workbookPart = spreadsheet.WorkbookPart;
        if (workbookPart is null)
        {
            Snackbar.Add("Invalid Excel file", Severity.Error);
            return;
        }
        
        var worksheetPart = workbookPart.WorksheetParts.FirstOrDefault();
        if (worksheetPart is null)
        {
            Snackbar.Add("Invalid Excel file", Severity.Error);
            return;
        }

        SharedStringTable = workbookPart.SharedStringTablePart?.SharedStringTable;
        var title = "";
        var numRows = 0;
        var numCols = 0;
        string[] rowNames = [];
        string[] colNames = [];
        var textData = new string[0, 0];
        var readerState = ReaderState.ReadingTitle;
        var reader = OpenXmlReader.Create(worksheetPart);
        var options = new MatrixOptions();
        while (reader.Read())
        {
            if (reader.ElementType != typeof(Row))
            {
                continue;
            }

            var row = (Row)reader.LoadCurrentElement()!;
            switch (readerState)
            {
                case ReaderState.ReadingTitle:
                    title = ReadTitle(row);
                    readerState = ReaderState.ReadingNumRows;
                    break;
                case ReaderState.ReadingNumRows:
                    if (!TryReadDimension(row, 2, out numRows))
                    {
                        Snackbar.Add("Excel file missing number of rows for matrix", Severity.Error);
                        return;
                    }
                    rowNames = new string[numRows];
                    readerState = ReaderState.ReadingNumCols;
                    break;
                case ReaderState.ReadingNumCols:
                    if (!TryReadDimension(row, 3, out numCols))
                    {
                        Snackbar.Add("Excel file missing number of columns for matrix", Severity.Error);
                        return;
                    }
                    readerState = ReaderState.ReadingOptions;
                    break;
                case ReaderState.ReadingOptions:
                    options = ReadOptions(row);
                    Console.WriteLine(options.Features);
                    readerState = ReaderState.Skip;
                    break;
                case ReaderState.Skip:
                    textData = new string[numRows, numCols];
                    for(var r = 0; r < numRows; r++)
                    {
                        for(var c = 0; c < numCols; c++)
                        {
                            textData[r, c] = "";
                        }
                    }
                    readerState = ReaderState.ReadingColNames;
                    break;
                case ReaderState.ReadingColNames:
                    colNames = ReadColNames(row, numCols);
                    readerState = ReaderState.ReadingRowNamesAndData;
                    break;
                case ReaderState.ReadingRowNamesAndData:
                    ReadRowNameAndData(row, rowNames, textData);
                    break;
                case ReaderState.None:
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
        
        // Create matrix from template
        Matrix!.Reset();
        Matrix!.Name = title;
        foreach (var (i, name) in colNames.Enumerate())
        {
            if (i == 0)
            {
                Matrix!.ColumnNames[0] = name;
            }
            else
            {
                Matrix!.AddColumn();
                Matrix!.ColumnNames[i] = name;
            }
        }
        
        foreach (var (i, name) in rowNames.Enumerate())
        {
            if (i == 0)
            {
                Matrix!.RowNames[0] = name;
            }
            else
            {
                Matrix!.AddRow();
                Matrix!.RowNames[i] = name;
            }
        }

        for (var row = 0; row < Matrix.RowCount; row++)
        {
            for (var col = 0; col < Matrix.ColumnCount; col++)
            {
                Matrix[row, col].Text = textData[row, col];
            }
        }
        
        Matrix!.Features = options.Features;
        _time = options.Timer;
        if (_time is not null)
        {
            Matrix.AllottedTime = _time!.Value.ToSeconds();
        }
        Matrix.Prompt.Text = options.Prompt;
        
        CellCache.Initialize(Matrix.RowCount, Matrix.ColumnCount);

        Console.WriteLine(Matrix.Features);
        
        StateHasChanged();
    }

    private static int GetColumnIndex(Cell cell)
    {
        var cellReference = cell.CellReference!.Value!;
        var column = ExcelCreator.ExtractAlpha(cellReference);
        return ExcelCreator.Base26ToDecimal(column) - 1;
    }

    private static int GetRowIndex(Cell cell)
    {
        var cellReference = cell.CellReference!.Value!;
        var row = ExcelCreator.ExtractNumeric(cellReference);
        return row - 1;
    }
    
    private string ReadTitle(Row row)
    {
        foreach (var cell in row.Descendants<Cell>())
        {
            if (cell.CellReference != "B1")
            {
                continue;
            }
            
            return GetCellText(cell);
        }

        return "";
    }

    private static bool TryReadDimension(Row row, int rowIndex, out int dimension)
    {
        foreach (var cell in row.Descendants<Cell>())
        {
            if (cell.CellReference != $"B{rowIndex}")
            {
                continue;
            }
            
            dimension = Convert.ToInt32(cell.InnerText);
            return true;
        }

        dimension = -1;
        return false;
    }
    
    private MatrixOptions ReadOptions(Row row)
    {
        var options = new MatrixOptions();
        foreach (var cell in row.Descendants<Cell>())
        {
            var optionValue = GetCellText(cell);
            var columnIndex = GetColumnIndex(cell);
            if(columnIndex % 2 == 0)
            {
                continue;
            }
            
            switch (columnIndex)
            {
                case 1: // Prompt
                    options.Prompt = optionValue;
                    break;
                case 3: // Timer
                    Console.WriteLine(optionValue);
                    if (double.TryParse(optionValue, out var time) && time != 0)
                    {
                        var timeSpan = TimeSpan.FromDays(time);
                        options.Features |= MatrixFeatures.Timer;
                        options.Timer = timeSpan;
                    }
                    else
                    {
                        options.Timer = null;
                    }
                    
                    break;
                case 5:
                {
                    var optionBool = GetBoolOptionValue(cell);
                    if (optionBool)
                    {
                        options.Features |= MatrixFeatures.RowRating;
                    }

                    break;
                }
                case 7:
                {
                    var optionBool = GetBoolOptionValue(cell);
                    if (optionBool)
                    {
                        options.Features |= MatrixFeatures.ColumnRating;
                    }

                    break;
                }
                case 9:
                {
                    var optionBool = GetBoolOptionValue(cell);
                    if (optionBool)
                    {
                        options.Features |= MatrixFeatures.RowRandomization;
                    }

                    break;
                }
                case 11:
                {
                    var optionBool = GetBoolOptionValue(cell);
                    if (optionBool)
                    {
                        options.Features |= MatrixFeatures.ColumnRandomization;
                    }

                    break;
                }
                default:
                    Console.WriteLine($"Unknown option: {optionValue}");
                    break;
            }
        }

        return options;
    }

    private bool GetBoolOptionValue(Cell cell)
    {
        if (cell.DataType is null)
        {
            return false;
        }
        
        if (cell.DataType.Value == CellValues.Boolean)
        {
            return cell.InnerText == "1";
        }
        
        var stringValue = GetCellText(cell);
        return TrueStringValues.Contains(stringValue);
    }
    
    private string[] ReadColNames(Row row, int numCols)
    {
        var colNames = new string[numCols];
        foreach (var cell in row.Descendants<Cell>())
        {
            var i = GetColumnIndex(cell);
            if (i == 0)
            {
                continue;
            }
            
            colNames[i - 1] = GetCellText(cell);
        }

        return colNames;
    }

    private void ReadRowNameAndData(Row row, string[] rowNames, string[,] data)
    {
        foreach (var cell in row.Descendants<Cell>())
        {
            var cellValue = GetCellText(cell);
            var columnIndex = GetColumnIndex(cell);
            var rowIndex = GetRowIndex(cell) - MetadataRows;
            Console.WriteLine($"Row: {rowIndex} {rowIndex}");
            if (columnIndex == 0)
            {
                rowNames[rowIndex] = cellValue;
            }
            else
            {
                Console.WriteLine($"Row: {rowIndex}, Col: {columnIndex - 1}, Value: {cellValue}");
                data[rowIndex, columnIndex - 1] = cellValue;
            }
        }
    }
    
    private string GetCellText(Cell cell)
    {
        return cell.DataType?.Value == CellValues.SharedString ? GetSharedString(cell.InnerText) : cell.InnerText;
    }
    
    private string GetSharedString(string stringIndex)
    {
        if (SharedStringTable is null)
        {
            throw new Exception("Shared string table not found");
        }

        return SharedStringTable.ElementAt(Convert.ToInt32(stringIndex)).InnerText;
    }

    internal enum ReaderState
    {
        None,
        ReadingTitle,
        ReadingNumRows,
        ReadingNumCols,
        ReadingOptions,
        Skip,
        ReadingColNames,
        ReadingRowNamesAndData,
    }

    internal class MatrixOptions
    {
        public string Prompt { get; set; } = "";
        public TimeSpan? Timer { get; set; }
        public MatrixFeatures Features { get; set; }
    }
}