@page "/admin/users"

@using Client.Singletons
@using Common.DataStructures.Dtos
@using Client.Components
@using Client.Models.Data
@using Client.Models.Enums

@inherits Client.Pages.Base.AdminAuthenticatedPage

@inject HttpClient Http
@inject HttpUtility HttpUtility
@inject ApplicationState ApplicationState
@inject ISnackbar Snackbar

<h3>User Administration</h3>

@if (Users is null)
{
    
}
else
{
    <MudContainer Class="d-flex flex-row flex-grow-1 gap-4">
        <MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="UpdateUsers">Update Users</MudButton>
    </MudContainer>
    <MudSimpleTable Hover="true" Dense="true">
        <thead>
        <tr>
            <th><b>First Name</b></th>
            <th><b>Last Name</b></th>
            <th><b>Role</b></th>
            <th><b>Locked</b></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>
                        <MudSelect Label="Role" @bind-Value="user.Role">
                            @foreach (var role in ManageableRoles[ApplicationState.Role])
                            {
                                <MudSelectItem Value="@role">@role</MudSelectItem>
                            }
                        </MudSelect>
                    </td>
                    <td><MudCheckBox @bind-Value="user.IsLockedOut" Color="Color.Primary" /></td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}

@code {

    private static readonly Dictionary<string, List<string>> ManageableRoles = new()
    {
        ["SuperAdmin"] = ["Admin", "Researcher", "User", "Guest"],
        ["Admin"] = ["Researcher", "User", "Guest"]
    };

    private string? _searchString;

    private List<AdministratedUser>? AllUsers { get; set; }
    private List<AdministratedUser>? Users { get; set; }

    private string? SearchString
    {
        get => _searchString;
        set
        {
            _searchString = value;
            Users = string.IsNullOrWhiteSpace(value)
                ? AllUsers
                : AllUsers?.Where(u => u.FirstName.Contains(value, StringComparison.OrdinalIgnoreCase) || u.LastName.Contains(value, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    protected override async Task<bool> OnInitializedAsync()
    {
        var valid = await base.OnInitializedAsync();
        if (!valid)
        {
            return false;
        }

        var allUsers = await HttpUtility.GetUsersForAdmin(Http);
        AllUsers = allUsers.Select(u => new AdministratedUser(u)).ToList();
        Users = AllUsers;
        return true;
    }

    private async Task UpdateUsers()
    {
        var failed = false;
        foreach (var user in AllUsers!.Where(user => user.ChangedUserData != ChangedUserData.None))
        {
            if (user.ChangedUserData.HasFlag(ChangedUserData.Role))
            {
                var successful = await HttpUtility.UpdateUserRole(Http, user.Guid, user.Role);
                if (!successful)
                {
                    Snackbar.Add("Failed to update user role", Severity.Error);
                    failed = true;
                }
            }

            if (user.ChangedUserData.HasFlag(ChangedUserData.LockoutEnd))
            {
                bool successful;
                if (user.IsLockedOut)
                {
                    successful = await HttpUtility.LockUser(Http, user.Guid);
                }
                else
                {
                    successful = await HttpUtility.UnlockUser(Http, user.Guid);
                }

                if (!successful)
                {
                    Snackbar.Add("Failed to update user lockout", Severity.Error);
                    failed = true;
                }
            }
        }

        if (failed)
        {
            Snackbar.Add("Some users updated", Severity.Warning);
        }
        else
        {
            Snackbar.Add("Users updated", Severity.Success);
        }
    }
}