@page "/login"

@using Client.Models.Authentication
@using Client.Singletons
@using Common.DataStructures.Http.Requests
@using Common.DataStructures.Http.Responses

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject ApplicationState ApplicationState

<h3>Login</h3>

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6" Align="Align.Center">Login</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudForm Model="@_model" @ref="@_form" Validation="@(_loginValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="_model.Email" For="@(() => _model.Email)" Immediate="true" Label="Email"/>
            <MudTextField @bind-Value="_model.Password" For="@(() => _model.Password)" Immediate="true" Label="Password" InputType="InputType.Password" OnKeyDown="EnterAsync"/>
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="SubmitAsync">Login</MudButton>
        @if(RedirectPath is not null) // ATM, It doesn't make sense to login as guest if there is no redirect path
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="LoginGuestAsync">Login as Guest</MudButton>
        }
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "redirect")]
    public string? RedirectPath { get; set; }
    
    private MudForm _form = null!;

    private readonly LoginModelValidator _loginValidator = new();

    private readonly LoginModel _model = new();

    protected override async Task OnInitializedAsync()
    {
        if (RedirectPath is not null)
        {
            await LoginGuestAsync();
        }
    }

    private async Task EnterAsync(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await SubmitAsync();
        }
    }
    
    private async Task LoginGuestAsync()
    {
        var response = await Http.PostAsync("api/Users/guest-login", null);
        
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<GuestAuthResponse>();
            if (result is null)
            {
                Snackbar.Add("Failed to get credentials!", Severity.Error);
                return;
            }

            await ApplicationState.StoreCredentials(result);
            Snackbar.Add("Login Successful!", Severity.Success);
            NavigateToDestination();
        }
        else
        {
            Snackbar.Add("Invalid Credentials!", Severity.Error);
        }
    }

    private async Task SubmitAsync()
    {
        await _form.Validate();

        if (!_form.IsValid)
        {
            return;
        }

        LoginRequest request = new()
        {
            Email = _model.Email,
            Password = _model.Password
        };

        var response = await Http.PostAsJsonAsync("api/Users/Login", request);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<AuthResponse>();
            if (result == null)
            {
                Snackbar.Add("Failed to get credentials!", Severity.Error);
                return;
            }

            await ApplicationState.StoreCredentials(result, _model.Email);
            Snackbar.Add("Login Successful!", Severity.Success);
            NavigateToDestination();
        }
        else
        {
            Snackbar.Add("Invalid Credentials!", Severity.Error);
        }
    }

    private void NavigateToDestination()
    {
        if (RedirectPath is not null && RedirectPath[0] != '/')
        {
            RedirectPath = "/" + RedirectPath; // Naive solution to prevent open redirects
        }
        
        NavManager.NavigateTo(RedirectPath ?? "/");
    }
}